/* tslint:disable */
/* eslint-disable */
/**
 * LedgerX Public API
 * ## Introduction  The LedgerX API provides endpoints for synchronizing on-chain wallets, retrieving normalized financial transactions, and managing wallets, wallet groups, organization members, and the accounting system (Chart of Accounts).  - **Security**: All endpoints (unless otherwise specified) require an **API_KEY**   in the request header. - **Rate Limit**: Depends on the user’s subscription plan. See details on the   subscriptions page. - **Compute Unit (CU)**: Each API consumes a specific number of CUs, which are   deducted from your monthly total.  **Useful Links**: - Rate limit: https://ledgerx.finance/subscriptions - Compute Unit: https://ledgerx.finance/subscriptions  > Note: Some CU and rate limit descriptions are for documentation purposes only. Actual limits are applied based on the user’s subscription plan. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

export const BASE_PATH = "https://api.ledgerx.finance".replace(/\/+$/, "");

export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

export interface RequestArgs {
    url: string;
    options: RawAxiosRequestConfig;
}

export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath ?? basePath;
        }
    }
};

export class RequiredError extends Error {
    constructor(public field: string, msg?: string) {
        super(msg);
        this.name = "RequiredError"
    }
}

interface ServerMap {
    [key: string]: {
        url: string,
        description: string,
    }[];
}

export const operationServerMap: ServerMap = {
}
