/*
LedgerX Public API

## Introduction  The LedgerX API provides endpoints for synchronizing on-chain wallets, retrieving normalized financial transactions, and managing wallets, wallet groups, organization members, and the accounting system (Chart of Accounts).  - **Security**: All endpoints (unless otherwise specified) require an **API_KEY**   in the request header. - **Rate Limit**: Depends on the user’s subscription plan. See details on the   subscriptions page. - **Compute Unit (CU)**: Each API consumes a specific number of CUs, which are   deducted from your monthly total.  **Useful Links**: - Rate limit: https://ledgerx.finance/subscriptions - Compute Unit: https://ledgerx.finance/subscriptions  > Note: Some CU and rate limit descriptions are for documentation purposes only. Actual limits are applied based on the user’s subscription plan. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ledgerx

import (
	"encoding/json"
	"time"
)

// checks if the Wallet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Wallet{}

// Wallet struct for Wallet
type Wallet struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Address *string `json:"address,omitempty"`
	SourceType *string `json:"sourceType,omitempty"`
	FlaggedAt NullableTime `json:"flaggedAt,omitempty"`
	Group *WalletGroupRef `json:"group,omitempty"`
	Balance NullableFloat32 `json:"balance,omitempty"`
	Status *string `json:"status,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	LastSyncedAt NullableTime `json:"lastSyncedAt,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	SupportedBlockchains []string `json:"supportedBlockchains,omitempty"`
	OwnedCryptocurrencies map[string]interface{} `json:"ownedCryptocurrencies,omitempty"`
}

// NewWallet instantiates a new Wallet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWallet() *Wallet {
	this := Wallet{}
	return &this
}

// NewWalletWithDefaults instantiates a new Wallet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWalletWithDefaults() *Wallet {
	this := Wallet{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Wallet) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wallet) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Wallet) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Wallet) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Wallet) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wallet) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Wallet) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Wallet) SetName(v string) {
	o.Name = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *Wallet) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wallet) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *Wallet) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *Wallet) SetAddress(v string) {
	o.Address = &v
}

// GetSourceType returns the SourceType field value if set, zero value otherwise.
func (o *Wallet) GetSourceType() string {
	if o == nil || IsNil(o.SourceType) {
		var ret string
		return ret
	}
	return *o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wallet) GetSourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SourceType) {
		return nil, false
	}
	return o.SourceType, true
}

// HasSourceType returns a boolean if a field has been set.
func (o *Wallet) HasSourceType() bool {
	if o != nil && !IsNil(o.SourceType) {
		return true
	}

	return false
}

// SetSourceType gets a reference to the given string and assigns it to the SourceType field.
func (o *Wallet) SetSourceType(v string) {
	o.SourceType = &v
}

// GetFlaggedAt returns the FlaggedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Wallet) GetFlaggedAt() time.Time {
	if o == nil || IsNil(o.FlaggedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.FlaggedAt.Get()
}

// GetFlaggedAtOk returns a tuple with the FlaggedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Wallet) GetFlaggedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.FlaggedAt.Get(), o.FlaggedAt.IsSet()
}

// HasFlaggedAt returns a boolean if a field has been set.
func (o *Wallet) HasFlaggedAt() bool {
	if o != nil && o.FlaggedAt.IsSet() {
		return true
	}

	return false
}

// SetFlaggedAt gets a reference to the given NullableTime and assigns it to the FlaggedAt field.
func (o *Wallet) SetFlaggedAt(v time.Time) {
	o.FlaggedAt.Set(&v)
}
// SetFlaggedAtNil sets the value for FlaggedAt to be an explicit nil
func (o *Wallet) SetFlaggedAtNil() {
	o.FlaggedAt.Set(nil)
}

// UnsetFlaggedAt ensures that no value is present for FlaggedAt, not even an explicit nil
func (o *Wallet) UnsetFlaggedAt() {
	o.FlaggedAt.Unset()
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *Wallet) GetGroup() WalletGroupRef {
	if o == nil || IsNil(o.Group) {
		var ret WalletGroupRef
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wallet) GetGroupOk() (*WalletGroupRef, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *Wallet) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given WalletGroupRef and assigns it to the Group field.
func (o *Wallet) SetGroup(v WalletGroupRef) {
	o.Group = &v
}

// GetBalance returns the Balance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Wallet) GetBalance() float32 {
	if o == nil || IsNil(o.Balance.Get()) {
		var ret float32
		return ret
	}
	return *o.Balance.Get()
}

// GetBalanceOk returns a tuple with the Balance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Wallet) GetBalanceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Balance.Get(), o.Balance.IsSet()
}

// HasBalance returns a boolean if a field has been set.
func (o *Wallet) HasBalance() bool {
	if o != nil && o.Balance.IsSet() {
		return true
	}

	return false
}

// SetBalance gets a reference to the given NullableFloat32 and assigns it to the Balance field.
func (o *Wallet) SetBalance(v float32) {
	o.Balance.Set(&v)
}
// SetBalanceNil sets the value for Balance to be an explicit nil
func (o *Wallet) SetBalanceNil() {
	o.Balance.Set(nil)
}

// UnsetBalance ensures that no value is present for Balance, not even an explicit nil
func (o *Wallet) UnsetBalance() {
	o.Balance.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Wallet) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wallet) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Wallet) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Wallet) SetStatus(v string) {
	o.Status = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Wallet) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Wallet) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Wallet) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *Wallet) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetLastSyncedAt returns the LastSyncedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Wallet) GetLastSyncedAt() time.Time {
	if o == nil || IsNil(o.LastSyncedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastSyncedAt.Get()
}

// GetLastSyncedAtOk returns a tuple with the LastSyncedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Wallet) GetLastSyncedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastSyncedAt.Get(), o.LastSyncedAt.IsSet()
}

// HasLastSyncedAt returns a boolean if a field has been set.
func (o *Wallet) HasLastSyncedAt() bool {
	if o != nil && o.LastSyncedAt.IsSet() {
		return true
	}

	return false
}

// SetLastSyncedAt gets a reference to the given NullableTime and assigns it to the LastSyncedAt field.
func (o *Wallet) SetLastSyncedAt(v time.Time) {
	o.LastSyncedAt.Set(&v)
}
// SetLastSyncedAtNil sets the value for LastSyncedAt to be an explicit nil
func (o *Wallet) SetLastSyncedAtNil() {
	o.LastSyncedAt.Set(nil)
}

// UnsetLastSyncedAt ensures that no value is present for LastSyncedAt, not even an explicit nil
func (o *Wallet) UnsetLastSyncedAt() {
	o.LastSyncedAt.Unset()
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Wallet) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wallet) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Wallet) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Wallet) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetSupportedBlockchains returns the SupportedBlockchains field value if set, zero value otherwise.
func (o *Wallet) GetSupportedBlockchains() []string {
	if o == nil || IsNil(o.SupportedBlockchains) {
		var ret []string
		return ret
	}
	return o.SupportedBlockchains
}

// GetSupportedBlockchainsOk returns a tuple with the SupportedBlockchains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wallet) GetSupportedBlockchainsOk() ([]string, bool) {
	if o == nil || IsNil(o.SupportedBlockchains) {
		return nil, false
	}
	return o.SupportedBlockchains, true
}

// HasSupportedBlockchains returns a boolean if a field has been set.
func (o *Wallet) HasSupportedBlockchains() bool {
	if o != nil && !IsNil(o.SupportedBlockchains) {
		return true
	}

	return false
}

// SetSupportedBlockchains gets a reference to the given []string and assigns it to the SupportedBlockchains field.
func (o *Wallet) SetSupportedBlockchains(v []string) {
	o.SupportedBlockchains = v
}

// GetOwnedCryptocurrencies returns the OwnedCryptocurrencies field value if set, zero value otherwise.
func (o *Wallet) GetOwnedCryptocurrencies() map[string]interface{} {
	if o == nil || IsNil(o.OwnedCryptocurrencies) {
		var ret map[string]interface{}
		return ret
	}
	return o.OwnedCryptocurrencies
}

// GetOwnedCryptocurrenciesOk returns a tuple with the OwnedCryptocurrencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wallet) GetOwnedCryptocurrenciesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.OwnedCryptocurrencies) {
		return map[string]interface{}{}, false
	}
	return o.OwnedCryptocurrencies, true
}

// HasOwnedCryptocurrencies returns a boolean if a field has been set.
func (o *Wallet) HasOwnedCryptocurrencies() bool {
	if o != nil && !IsNil(o.OwnedCryptocurrencies) {
		return true
	}

	return false
}

// SetOwnedCryptocurrencies gets a reference to the given map[string]interface{} and assigns it to the OwnedCryptocurrencies field.
func (o *Wallet) SetOwnedCryptocurrencies(v map[string]interface{}) {
	o.OwnedCryptocurrencies = v
}

func (o Wallet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Wallet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.SourceType) {
		toSerialize["sourceType"] = o.SourceType
	}
	if o.FlaggedAt.IsSet() {
		toSerialize["flaggedAt"] = o.FlaggedAt.Get()
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if o.Balance.IsSet() {
		toSerialize["balance"] = o.Balance.Get()
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.LastSyncedAt.IsSet() {
		toSerialize["lastSyncedAt"] = o.LastSyncedAt.Get()
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.SupportedBlockchains) {
		toSerialize["supportedBlockchains"] = o.SupportedBlockchains
	}
	if !IsNil(o.OwnedCryptocurrencies) {
		toSerialize["ownedCryptocurrencies"] = o.OwnedCryptocurrencies
	}
	return toSerialize, nil
}

type NullableWallet struct {
	value *Wallet
	isSet bool
}

func (v NullableWallet) Get() *Wallet {
	return v.value
}

func (v *NullableWallet) Set(val *Wallet) {
	v.value = val
	v.isSet = true
}

func (v NullableWallet) IsSet() bool {
	return v.isSet
}

func (v *NullableWallet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWallet(val *Wallet) *NullableWallet {
	return &NullableWallet{value: val, isSet: true}
}

func (v NullableWallet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWallet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


