/*
LedgerX Public API

## Introduction  The LedgerX API provides endpoints for synchronizing on-chain wallets, retrieving normalized financial transactions, and managing wallets, wallet groups, organization members, and the accounting system (Chart of Accounts).  - **Security**: All endpoints (unless otherwise specified) require an **API_KEY**   in the request header. - **Rate Limit**: Depends on the user’s subscription plan. See details on the   subscriptions page. - **Compute Unit (CU)**: Each API consumes a specific number of CUs, which are   deducted from your monthly total.  **Useful Links**: - Rate limit: https://ledgerx.finance/subscriptions - Compute Unit: https://ledgerx.finance/subscriptions  > Note: Some CU and rate limit descriptions are for documentation purposes only. Actual limits are applied based on the user’s subscription plan. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ledgerx

import (
	"encoding/json"
	"time"
)

// checks if the FinancialTransactionParent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FinancialTransactionParent{}

// FinancialTransactionParent struct for FinancialTransactionParent
type FinancialTransactionParent struct {
	Hash *string `json:"hash,omitempty"`
	BlockchainId *string `json:"blockchainId,omitempty"`
	Activity *string `json:"activity,omitempty"`
	Status *string `json:"status,omitempty"`
	ExportStatus *string `json:"exportStatus,omitempty"`
	ValueTimestamp *time.Time `json:"valueTimestamp,omitempty"`
	ChildCount *int32 `json:"childCount,omitempty"`
}

// NewFinancialTransactionParent instantiates a new FinancialTransactionParent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFinancialTransactionParent() *FinancialTransactionParent {
	this := FinancialTransactionParent{}
	return &this
}

// NewFinancialTransactionParentWithDefaults instantiates a new FinancialTransactionParent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFinancialTransactionParentWithDefaults() *FinancialTransactionParent {
	this := FinancialTransactionParent{}
	return &this
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *FinancialTransactionParent) GetHash() string {
	if o == nil || IsNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinancialTransactionParent) GetHashOk() (*string, bool) {
	if o == nil || IsNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *FinancialTransactionParent) HasHash() bool {
	if o != nil && !IsNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *FinancialTransactionParent) SetHash(v string) {
	o.Hash = &v
}

// GetBlockchainId returns the BlockchainId field value if set, zero value otherwise.
func (o *FinancialTransactionParent) GetBlockchainId() string {
	if o == nil || IsNil(o.BlockchainId) {
		var ret string
		return ret
	}
	return *o.BlockchainId
}

// GetBlockchainIdOk returns a tuple with the BlockchainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinancialTransactionParent) GetBlockchainIdOk() (*string, bool) {
	if o == nil || IsNil(o.BlockchainId) {
		return nil, false
	}
	return o.BlockchainId, true
}

// HasBlockchainId returns a boolean if a field has been set.
func (o *FinancialTransactionParent) HasBlockchainId() bool {
	if o != nil && !IsNil(o.BlockchainId) {
		return true
	}

	return false
}

// SetBlockchainId gets a reference to the given string and assigns it to the BlockchainId field.
func (o *FinancialTransactionParent) SetBlockchainId(v string) {
	o.BlockchainId = &v
}

// GetActivity returns the Activity field value if set, zero value otherwise.
func (o *FinancialTransactionParent) GetActivity() string {
	if o == nil || IsNil(o.Activity) {
		var ret string
		return ret
	}
	return *o.Activity
}

// GetActivityOk returns a tuple with the Activity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinancialTransactionParent) GetActivityOk() (*string, bool) {
	if o == nil || IsNil(o.Activity) {
		return nil, false
	}
	return o.Activity, true
}

// HasActivity returns a boolean if a field has been set.
func (o *FinancialTransactionParent) HasActivity() bool {
	if o != nil && !IsNil(o.Activity) {
		return true
	}

	return false
}

// SetActivity gets a reference to the given string and assigns it to the Activity field.
func (o *FinancialTransactionParent) SetActivity(v string) {
	o.Activity = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *FinancialTransactionParent) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinancialTransactionParent) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *FinancialTransactionParent) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *FinancialTransactionParent) SetStatus(v string) {
	o.Status = &v
}

// GetExportStatus returns the ExportStatus field value if set, zero value otherwise.
func (o *FinancialTransactionParent) GetExportStatus() string {
	if o == nil || IsNil(o.ExportStatus) {
		var ret string
		return ret
	}
	return *o.ExportStatus
}

// GetExportStatusOk returns a tuple with the ExportStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinancialTransactionParent) GetExportStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ExportStatus) {
		return nil, false
	}
	return o.ExportStatus, true
}

// HasExportStatus returns a boolean if a field has been set.
func (o *FinancialTransactionParent) HasExportStatus() bool {
	if o != nil && !IsNil(o.ExportStatus) {
		return true
	}

	return false
}

// SetExportStatus gets a reference to the given string and assigns it to the ExportStatus field.
func (o *FinancialTransactionParent) SetExportStatus(v string) {
	o.ExportStatus = &v
}

// GetValueTimestamp returns the ValueTimestamp field value if set, zero value otherwise.
func (o *FinancialTransactionParent) GetValueTimestamp() time.Time {
	if o == nil || IsNil(o.ValueTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.ValueTimestamp
}

// GetValueTimestampOk returns a tuple with the ValueTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinancialTransactionParent) GetValueTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ValueTimestamp) {
		return nil, false
	}
	return o.ValueTimestamp, true
}

// HasValueTimestamp returns a boolean if a field has been set.
func (o *FinancialTransactionParent) HasValueTimestamp() bool {
	if o != nil && !IsNil(o.ValueTimestamp) {
		return true
	}

	return false
}

// SetValueTimestamp gets a reference to the given time.Time and assigns it to the ValueTimestamp field.
func (o *FinancialTransactionParent) SetValueTimestamp(v time.Time) {
	o.ValueTimestamp = &v
}

// GetChildCount returns the ChildCount field value if set, zero value otherwise.
func (o *FinancialTransactionParent) GetChildCount() int32 {
	if o == nil || IsNil(o.ChildCount) {
		var ret int32
		return ret
	}
	return *o.ChildCount
}

// GetChildCountOk returns a tuple with the ChildCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinancialTransactionParent) GetChildCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ChildCount) {
		return nil, false
	}
	return o.ChildCount, true
}

// HasChildCount returns a boolean if a field has been set.
func (o *FinancialTransactionParent) HasChildCount() bool {
	if o != nil && !IsNil(o.ChildCount) {
		return true
	}

	return false
}

// SetChildCount gets a reference to the given int32 and assigns it to the ChildCount field.
func (o *FinancialTransactionParent) SetChildCount(v int32) {
	o.ChildCount = &v
}

func (o FinancialTransactionParent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FinancialTransactionParent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	if !IsNil(o.BlockchainId) {
		toSerialize["blockchainId"] = o.BlockchainId
	}
	if !IsNil(o.Activity) {
		toSerialize["activity"] = o.Activity
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.ExportStatus) {
		toSerialize["exportStatus"] = o.ExportStatus
	}
	if !IsNil(o.ValueTimestamp) {
		toSerialize["valueTimestamp"] = o.ValueTimestamp
	}
	if !IsNil(o.ChildCount) {
		toSerialize["childCount"] = o.ChildCount
	}
	return toSerialize, nil
}

type NullableFinancialTransactionParent struct {
	value *FinancialTransactionParent
	isSet bool
}

func (v NullableFinancialTransactionParent) Get() *FinancialTransactionParent {
	return v.value
}

func (v *NullableFinancialTransactionParent) Set(val *FinancialTransactionParent) {
	v.value = val
	v.isSet = true
}

func (v NullableFinancialTransactionParent) IsSet() bool {
	return v.isSet
}

func (v *NullableFinancialTransactionParent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFinancialTransactionParent(val *FinancialTransactionParent) *NullableFinancialTransactionParent {
	return &NullableFinancialTransactionParent{value: val, isSet: true}
}

func (v NullableFinancialTransactionParent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFinancialTransactionParent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


