/*
LedgerX Public API

## Introduction  The LedgerX API provides endpoints for synchronizing on-chain wallets, retrieving normalized financial transactions, and managing wallets, wallet groups, organization members, and the accounting system (Chart of Accounts).  - **Security**: All endpoints (unless otherwise specified) require an **API_KEY**   in the request header. - **Rate Limit**: Depends on the user’s subscription plan. See details on the   subscriptions page. - **Compute Unit (CU)**: Each API consumes a specific number of CUs, which are   deducted from your monthly total.  **Useful Links**: - Rate limit: https://ledgerx.finance/subscriptions - Compute Unit: https://ledgerx.finance/subscriptions  > Note: Some CU and rate limit descriptions are for documentation purposes only. Actual limits are applied based on the user’s subscription plan. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ledgerx

import (
	"encoding/json"
)

// checks if the SyncPostResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SyncPostResponse{}

// SyncPostResponse struct for SyncPostResponse
type SyncPostResponse struct {
	JobId *string `json:"jobId,omitempty"`
}

// NewSyncPostResponse instantiates a new SyncPostResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyncPostResponse() *SyncPostResponse {
	this := SyncPostResponse{}
	return &this
}

// NewSyncPostResponseWithDefaults instantiates a new SyncPostResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyncPostResponseWithDefaults() *SyncPostResponse {
	this := SyncPostResponse{}
	return &this
}

// GetJobId returns the JobId field value if set, zero value otherwise.
func (o *SyncPostResponse) GetJobId() string {
	if o == nil || IsNil(o.JobId) {
		var ret string
		return ret
	}
	return *o.JobId
}

// GetJobIdOk returns a tuple with the JobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncPostResponse) GetJobIdOk() (*string, bool) {
	if o == nil || IsNil(o.JobId) {
		return nil, false
	}
	return o.JobId, true
}

// HasJobId returns a boolean if a field has been set.
func (o *SyncPostResponse) HasJobId() bool {
	if o != nil && !IsNil(o.JobId) {
		return true
	}

	return false
}

// SetJobId gets a reference to the given string and assigns it to the JobId field.
func (o *SyncPostResponse) SetJobId(v string) {
	o.JobId = &v
}

func (o SyncPostResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SyncPostResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.JobId) {
		toSerialize["jobId"] = o.JobId
	}
	return toSerialize, nil
}

type NullableSyncPostResponse struct {
	value *SyncPostResponse
	isSet bool
}

func (v NullableSyncPostResponse) Get() *SyncPostResponse {
	return v.value
}

func (v *NullableSyncPostResponse) Set(val *SyncPostResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSyncPostResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSyncPostResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyncPostResponse(val *SyncPostResponse) *NullableSyncPostResponse {
	return &NullableSyncPostResponse{value: val, isSet: true}
}

func (v NullableSyncPostResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyncPostResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


