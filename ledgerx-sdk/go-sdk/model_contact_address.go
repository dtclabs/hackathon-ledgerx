/*
LedgerX Public API

## Introduction  The LedgerX API provides endpoints for synchronizing on-chain wallets, retrieving normalized financial transactions, and managing wallets, wallet groups, organization members, and the accounting system (Chart of Accounts).  - **Security**: All endpoints (unless otherwise specified) require an **API_KEY**   in the request header. - **Rate Limit**: Depends on the user’s subscription plan. See details on the   subscriptions page. - **Compute Unit (CU)**: Each API consumes a specific number of CUs, which are   deducted from your monthly total.  **Useful Links**: - Rate limit: https://ledgerx.finance/subscriptions - Compute Unit: https://ledgerx.finance/subscriptions  > Note: Some CU and rate limit descriptions are for documentation purposes only. Actual limits are applied based on the user’s subscription plan. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ledgerx

import (
	"encoding/json"
)

// checks if the ContactAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContactAddress{}

// ContactAddress struct for ContactAddress
type ContactAddress struct {
	Address *string `json:"address,omitempty"`
	BlockchainId NullableString `json:"blockchainId,omitempty"`
}

// NewContactAddress instantiates a new ContactAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactAddress() *ContactAddress {
	this := ContactAddress{}
	return &this
}

// NewContactAddressWithDefaults instantiates a new ContactAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactAddressWithDefaults() *ContactAddress {
	this := ContactAddress{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *ContactAddress) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactAddress) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *ContactAddress) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *ContactAddress) SetAddress(v string) {
	o.Address = &v
}

// GetBlockchainId returns the BlockchainId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContactAddress) GetBlockchainId() string {
	if o == nil || IsNil(o.BlockchainId.Get()) {
		var ret string
		return ret
	}
	return *o.BlockchainId.Get()
}

// GetBlockchainIdOk returns a tuple with the BlockchainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContactAddress) GetBlockchainIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BlockchainId.Get(), o.BlockchainId.IsSet()
}

// HasBlockchainId returns a boolean if a field has been set.
func (o *ContactAddress) HasBlockchainId() bool {
	if o != nil && o.BlockchainId.IsSet() {
		return true
	}

	return false
}

// SetBlockchainId gets a reference to the given NullableString and assigns it to the BlockchainId field.
func (o *ContactAddress) SetBlockchainId(v string) {
	o.BlockchainId.Set(&v)
}
// SetBlockchainIdNil sets the value for BlockchainId to be an explicit nil
func (o *ContactAddress) SetBlockchainIdNil() {
	o.BlockchainId.Set(nil)
}

// UnsetBlockchainId ensures that no value is present for BlockchainId, not even an explicit nil
func (o *ContactAddress) UnsetBlockchainId() {
	o.BlockchainId.Unset()
}

func (o ContactAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContactAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if o.BlockchainId.IsSet() {
		toSerialize["blockchainId"] = o.BlockchainId.Get()
	}
	return toSerialize, nil
}

type NullableContactAddress struct {
	value *ContactAddress
	isSet bool
}

func (v NullableContactAddress) Get() *ContactAddress {
	return v.value
}

func (v *NullableContactAddress) Set(val *ContactAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableContactAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableContactAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactAddress(val *ContactAddress) *NullableContactAddress {
	return &NullableContactAddress{value: val, isSet: true}
}

func (v NullableContactAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


