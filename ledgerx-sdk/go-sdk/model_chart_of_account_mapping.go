/*
LedgerX Public API

## Introduction  The LedgerX API provides endpoints for synchronizing on-chain wallets, retrieving normalized financial transactions, and managing wallets, wallet groups, organization members, and the accounting system (Chart of Accounts).  - **Security**: All endpoints (unless otherwise specified) require an **API_KEY**   in the request header. - **Rate Limit**: Depends on the user’s subscription plan. See details on the   subscriptions page. - **Compute Unit (CU)**: Each API consumes a specific number of CUs, which are   deducted from your monthly total.  **Useful Links**: - Rate limit: https://ledgerx.finance/subscriptions - Compute Unit: https://ledgerx.finance/subscriptions  > Note: Some CU and rate limit descriptions are for documentation purposes only. Actual limits are applied based on the user’s subscription plan. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ledgerx

import (
	"encoding/json"
)

// checks if the ChartOfAccountMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChartOfAccountMapping{}

// ChartOfAccountMapping struct for ChartOfAccountMapping
type ChartOfAccountMapping struct {
	Id *string `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	ChartOfAccount NullableString `json:"chartOfAccount,omitempty"`
	WalletId NullableString `json:"walletId,omitempty"`
	CryptocurrencyId NullableString `json:"cryptocurrencyId,omitempty"`
	RecipientId NullableString `json:"recipientId,omitempty"`
	Direction NullableString `json:"direction,omitempty"`
}

// NewChartOfAccountMapping instantiates a new ChartOfAccountMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChartOfAccountMapping() *ChartOfAccountMapping {
	this := ChartOfAccountMapping{}
	return &this
}

// NewChartOfAccountMappingWithDefaults instantiates a new ChartOfAccountMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChartOfAccountMappingWithDefaults() *ChartOfAccountMapping {
	this := ChartOfAccountMapping{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ChartOfAccountMapping) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartOfAccountMapping) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ChartOfAccountMapping) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ChartOfAccountMapping) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ChartOfAccountMapping) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartOfAccountMapping) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ChartOfAccountMapping) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ChartOfAccountMapping) SetType(v string) {
	o.Type = &v
}

// GetChartOfAccount returns the ChartOfAccount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChartOfAccountMapping) GetChartOfAccount() string {
	if o == nil || IsNil(o.ChartOfAccount.Get()) {
		var ret string
		return ret
	}
	return *o.ChartOfAccount.Get()
}

// GetChartOfAccountOk returns a tuple with the ChartOfAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChartOfAccountMapping) GetChartOfAccountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChartOfAccount.Get(), o.ChartOfAccount.IsSet()
}

// HasChartOfAccount returns a boolean if a field has been set.
func (o *ChartOfAccountMapping) HasChartOfAccount() bool {
	if o != nil && o.ChartOfAccount.IsSet() {
		return true
	}

	return false
}

// SetChartOfAccount gets a reference to the given NullableString and assigns it to the ChartOfAccount field.
func (o *ChartOfAccountMapping) SetChartOfAccount(v string) {
	o.ChartOfAccount.Set(&v)
}
// SetChartOfAccountNil sets the value for ChartOfAccount to be an explicit nil
func (o *ChartOfAccountMapping) SetChartOfAccountNil() {
	o.ChartOfAccount.Set(nil)
}

// UnsetChartOfAccount ensures that no value is present for ChartOfAccount, not even an explicit nil
func (o *ChartOfAccountMapping) UnsetChartOfAccount() {
	o.ChartOfAccount.Unset()
}

// GetWalletId returns the WalletId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChartOfAccountMapping) GetWalletId() string {
	if o == nil || IsNil(o.WalletId.Get()) {
		var ret string
		return ret
	}
	return *o.WalletId.Get()
}

// GetWalletIdOk returns a tuple with the WalletId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChartOfAccountMapping) GetWalletIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WalletId.Get(), o.WalletId.IsSet()
}

// HasWalletId returns a boolean if a field has been set.
func (o *ChartOfAccountMapping) HasWalletId() bool {
	if o != nil && o.WalletId.IsSet() {
		return true
	}

	return false
}

// SetWalletId gets a reference to the given NullableString and assigns it to the WalletId field.
func (o *ChartOfAccountMapping) SetWalletId(v string) {
	o.WalletId.Set(&v)
}
// SetWalletIdNil sets the value for WalletId to be an explicit nil
func (o *ChartOfAccountMapping) SetWalletIdNil() {
	o.WalletId.Set(nil)
}

// UnsetWalletId ensures that no value is present for WalletId, not even an explicit nil
func (o *ChartOfAccountMapping) UnsetWalletId() {
	o.WalletId.Unset()
}

// GetCryptocurrencyId returns the CryptocurrencyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChartOfAccountMapping) GetCryptocurrencyId() string {
	if o == nil || IsNil(o.CryptocurrencyId.Get()) {
		var ret string
		return ret
	}
	return *o.CryptocurrencyId.Get()
}

// GetCryptocurrencyIdOk returns a tuple with the CryptocurrencyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChartOfAccountMapping) GetCryptocurrencyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CryptocurrencyId.Get(), o.CryptocurrencyId.IsSet()
}

// HasCryptocurrencyId returns a boolean if a field has been set.
func (o *ChartOfAccountMapping) HasCryptocurrencyId() bool {
	if o != nil && o.CryptocurrencyId.IsSet() {
		return true
	}

	return false
}

// SetCryptocurrencyId gets a reference to the given NullableString and assigns it to the CryptocurrencyId field.
func (o *ChartOfAccountMapping) SetCryptocurrencyId(v string) {
	o.CryptocurrencyId.Set(&v)
}
// SetCryptocurrencyIdNil sets the value for CryptocurrencyId to be an explicit nil
func (o *ChartOfAccountMapping) SetCryptocurrencyIdNil() {
	o.CryptocurrencyId.Set(nil)
}

// UnsetCryptocurrencyId ensures that no value is present for CryptocurrencyId, not even an explicit nil
func (o *ChartOfAccountMapping) UnsetCryptocurrencyId() {
	o.CryptocurrencyId.Unset()
}

// GetRecipientId returns the RecipientId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChartOfAccountMapping) GetRecipientId() string {
	if o == nil || IsNil(o.RecipientId.Get()) {
		var ret string
		return ret
	}
	return *o.RecipientId.Get()
}

// GetRecipientIdOk returns a tuple with the RecipientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChartOfAccountMapping) GetRecipientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecipientId.Get(), o.RecipientId.IsSet()
}

// HasRecipientId returns a boolean if a field has been set.
func (o *ChartOfAccountMapping) HasRecipientId() bool {
	if o != nil && o.RecipientId.IsSet() {
		return true
	}

	return false
}

// SetRecipientId gets a reference to the given NullableString and assigns it to the RecipientId field.
func (o *ChartOfAccountMapping) SetRecipientId(v string) {
	o.RecipientId.Set(&v)
}
// SetRecipientIdNil sets the value for RecipientId to be an explicit nil
func (o *ChartOfAccountMapping) SetRecipientIdNil() {
	o.RecipientId.Set(nil)
}

// UnsetRecipientId ensures that no value is present for RecipientId, not even an explicit nil
func (o *ChartOfAccountMapping) UnsetRecipientId() {
	o.RecipientId.Unset()
}

// GetDirection returns the Direction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChartOfAccountMapping) GetDirection() string {
	if o == nil || IsNil(o.Direction.Get()) {
		var ret string
		return ret
	}
	return *o.Direction.Get()
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChartOfAccountMapping) GetDirectionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Direction.Get(), o.Direction.IsSet()
}

// HasDirection returns a boolean if a field has been set.
func (o *ChartOfAccountMapping) HasDirection() bool {
	if o != nil && o.Direction.IsSet() {
		return true
	}

	return false
}

// SetDirection gets a reference to the given NullableString and assigns it to the Direction field.
func (o *ChartOfAccountMapping) SetDirection(v string) {
	o.Direction.Set(&v)
}
// SetDirectionNil sets the value for Direction to be an explicit nil
func (o *ChartOfAccountMapping) SetDirectionNil() {
	o.Direction.Set(nil)
}

// UnsetDirection ensures that no value is present for Direction, not even an explicit nil
func (o *ChartOfAccountMapping) UnsetDirection() {
	o.Direction.Unset()
}

func (o ChartOfAccountMapping) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChartOfAccountMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.ChartOfAccount.IsSet() {
		toSerialize["chartOfAccount"] = o.ChartOfAccount.Get()
	}
	if o.WalletId.IsSet() {
		toSerialize["walletId"] = o.WalletId.Get()
	}
	if o.CryptocurrencyId.IsSet() {
		toSerialize["cryptocurrencyId"] = o.CryptocurrencyId.Get()
	}
	if o.RecipientId.IsSet() {
		toSerialize["recipientId"] = o.RecipientId.Get()
	}
	if o.Direction.IsSet() {
		toSerialize["direction"] = o.Direction.Get()
	}
	return toSerialize, nil
}

type NullableChartOfAccountMapping struct {
	value *ChartOfAccountMapping
	isSet bool
}

func (v NullableChartOfAccountMapping) Get() *ChartOfAccountMapping {
	return v.value
}

func (v *NullableChartOfAccountMapping) Set(val *ChartOfAccountMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableChartOfAccountMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableChartOfAccountMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChartOfAccountMapping(val *ChartOfAccountMapping) *NullableChartOfAccountMapping {
	return &NullableChartOfAccountMapping{value: val, isSet: true}
}

func (v NullableChartOfAccountMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChartOfAccountMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


