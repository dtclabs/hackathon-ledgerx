/*
LedgerX Public API

## Introduction  The LedgerX API provides endpoints for synchronizing on-chain wallets, retrieving normalized financial transactions, and managing wallets, wallet groups, organization members, and the accounting system (Chart of Accounts).  - **Security**: All endpoints (unless otherwise specified) require an **API_KEY**   in the request header. - **Rate Limit**: Depends on the user’s subscription plan. See details on the   subscriptions page. - **Compute Unit (CU)**: Each API consumes a specific number of CUs, which are   deducted from your monthly total.  **Useful Links**: - Rate limit: https://ledgerx.finance/subscriptions - Compute Unit: https://ledgerx.finance/subscriptions  > Note: Some CU and rate limit descriptions are for documentation purposes only. Actual limits are applied based on the user’s subscription plan. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ledgerx

import (
	"encoding/json"
)

// checks if the Cryptocurrency type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Cryptocurrency{}

// Cryptocurrency struct for Cryptocurrency
type Cryptocurrency struct {
	Name *string `json:"name,omitempty"`
	PublicId *string `json:"publicId,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Image *CryptocurrencyImage `json:"image,omitempty"`
	IsVerified *bool `json:"isVerified,omitempty"`
	Addresses []string `json:"addresses,omitempty"`
}

// NewCryptocurrency instantiates a new Cryptocurrency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCryptocurrency() *Cryptocurrency {
	this := Cryptocurrency{}
	return &this
}

// NewCryptocurrencyWithDefaults instantiates a new Cryptocurrency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCryptocurrencyWithDefaults() *Cryptocurrency {
	this := Cryptocurrency{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Cryptocurrency) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cryptocurrency) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Cryptocurrency) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Cryptocurrency) SetName(v string) {
	o.Name = &v
}

// GetPublicId returns the PublicId field value if set, zero value otherwise.
func (o *Cryptocurrency) GetPublicId() string {
	if o == nil || IsNil(o.PublicId) {
		var ret string
		return ret
	}
	return *o.PublicId
}

// GetPublicIdOk returns a tuple with the PublicId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cryptocurrency) GetPublicIdOk() (*string, bool) {
	if o == nil || IsNil(o.PublicId) {
		return nil, false
	}
	return o.PublicId, true
}

// HasPublicId returns a boolean if a field has been set.
func (o *Cryptocurrency) HasPublicId() bool {
	if o != nil && !IsNil(o.PublicId) {
		return true
	}

	return false
}

// SetPublicId gets a reference to the given string and assigns it to the PublicId field.
func (o *Cryptocurrency) SetPublicId(v string) {
	o.PublicId = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *Cryptocurrency) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cryptocurrency) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *Cryptocurrency) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *Cryptocurrency) SetSymbol(v string) {
	o.Symbol = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *Cryptocurrency) GetImage() CryptocurrencyImage {
	if o == nil || IsNil(o.Image) {
		var ret CryptocurrencyImage
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cryptocurrency) GetImageOk() (*CryptocurrencyImage, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *Cryptocurrency) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given CryptocurrencyImage and assigns it to the Image field.
func (o *Cryptocurrency) SetImage(v CryptocurrencyImage) {
	o.Image = &v
}

// GetIsVerified returns the IsVerified field value if set, zero value otherwise.
func (o *Cryptocurrency) GetIsVerified() bool {
	if o == nil || IsNil(o.IsVerified) {
		var ret bool
		return ret
	}
	return *o.IsVerified
}

// GetIsVerifiedOk returns a tuple with the IsVerified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cryptocurrency) GetIsVerifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsVerified) {
		return nil, false
	}
	return o.IsVerified, true
}

// HasIsVerified returns a boolean if a field has been set.
func (o *Cryptocurrency) HasIsVerified() bool {
	if o != nil && !IsNil(o.IsVerified) {
		return true
	}

	return false
}

// SetIsVerified gets a reference to the given bool and assigns it to the IsVerified field.
func (o *Cryptocurrency) SetIsVerified(v bool) {
	o.IsVerified = &v
}

// GetAddresses returns the Addresses field value if set, zero value otherwise.
func (o *Cryptocurrency) GetAddresses() []string {
	if o == nil || IsNil(o.Addresses) {
		var ret []string
		return ret
	}
	return o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cryptocurrency) GetAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.Addresses) {
		return nil, false
	}
	return o.Addresses, true
}

// HasAddresses returns a boolean if a field has been set.
func (o *Cryptocurrency) HasAddresses() bool {
	if o != nil && !IsNil(o.Addresses) {
		return true
	}

	return false
}

// SetAddresses gets a reference to the given []string and assigns it to the Addresses field.
func (o *Cryptocurrency) SetAddresses(v []string) {
	o.Addresses = v
}

func (o Cryptocurrency) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Cryptocurrency) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PublicId) {
		toSerialize["publicId"] = o.PublicId
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	if !IsNil(o.IsVerified) {
		toSerialize["isVerified"] = o.IsVerified
	}
	if !IsNil(o.Addresses) {
		toSerialize["addresses"] = o.Addresses
	}
	return toSerialize, nil
}

type NullableCryptocurrency struct {
	value *Cryptocurrency
	isSet bool
}

func (v NullableCryptocurrency) Get() *Cryptocurrency {
	return v.value
}

func (v *NullableCryptocurrency) Set(val *Cryptocurrency) {
	v.value = val
	v.isSet = true
}

func (v NullableCryptocurrency) IsSet() bool {
	return v.isSet
}

func (v *NullableCryptocurrency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCryptocurrency(val *Cryptocurrency) *NullableCryptocurrency {
	return &NullableCryptocurrency{value: val, isSet: true}
}

func (v NullableCryptocurrency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCryptocurrency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


