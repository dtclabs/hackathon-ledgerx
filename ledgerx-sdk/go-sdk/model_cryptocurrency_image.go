/*
LedgerX Public API

## Introduction  The LedgerX API provides endpoints for synchronizing on-chain wallets, retrieving normalized financial transactions, and managing wallets, wallet groups, organization members, and the accounting system (Chart of Accounts).  - **Security**: All endpoints (unless otherwise specified) require an **API_KEY**   in the request header. - **Rate Limit**: Depends on the user’s subscription plan. See details on the   subscriptions page. - **Compute Unit (CU)**: Each API consumes a specific number of CUs, which are   deducted from your monthly total.  **Useful Links**: - Rate limit: https://ledgerx.finance/subscriptions - Compute Unit: https://ledgerx.finance/subscriptions  > Note: Some CU and rate limit descriptions are for documentation purposes only. Actual limits are applied based on the user’s subscription plan. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ledgerx

import (
	"encoding/json"
)

// checks if the CryptocurrencyImage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CryptocurrencyImage{}

// CryptocurrencyImage struct for CryptocurrencyImage
type CryptocurrencyImage struct {
	Large *string `json:"large,omitempty"`
	Small *string `json:"small,omitempty"`
	Thumb *string `json:"thumb,omitempty"`
}

// NewCryptocurrencyImage instantiates a new CryptocurrencyImage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCryptocurrencyImage() *CryptocurrencyImage {
	this := CryptocurrencyImage{}
	return &this
}

// NewCryptocurrencyImageWithDefaults instantiates a new CryptocurrencyImage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCryptocurrencyImageWithDefaults() *CryptocurrencyImage {
	this := CryptocurrencyImage{}
	return &this
}

// GetLarge returns the Large field value if set, zero value otherwise.
func (o *CryptocurrencyImage) GetLarge() string {
	if o == nil || IsNil(o.Large) {
		var ret string
		return ret
	}
	return *o.Large
}

// GetLargeOk returns a tuple with the Large field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptocurrencyImage) GetLargeOk() (*string, bool) {
	if o == nil || IsNil(o.Large) {
		return nil, false
	}
	return o.Large, true
}

// HasLarge returns a boolean if a field has been set.
func (o *CryptocurrencyImage) HasLarge() bool {
	if o != nil && !IsNil(o.Large) {
		return true
	}

	return false
}

// SetLarge gets a reference to the given string and assigns it to the Large field.
func (o *CryptocurrencyImage) SetLarge(v string) {
	o.Large = &v
}

// GetSmall returns the Small field value if set, zero value otherwise.
func (o *CryptocurrencyImage) GetSmall() string {
	if o == nil || IsNil(o.Small) {
		var ret string
		return ret
	}
	return *o.Small
}

// GetSmallOk returns a tuple with the Small field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptocurrencyImage) GetSmallOk() (*string, bool) {
	if o == nil || IsNil(o.Small) {
		return nil, false
	}
	return o.Small, true
}

// HasSmall returns a boolean if a field has been set.
func (o *CryptocurrencyImage) HasSmall() bool {
	if o != nil && !IsNil(o.Small) {
		return true
	}

	return false
}

// SetSmall gets a reference to the given string and assigns it to the Small field.
func (o *CryptocurrencyImage) SetSmall(v string) {
	o.Small = &v
}

// GetThumb returns the Thumb field value if set, zero value otherwise.
func (o *CryptocurrencyImage) GetThumb() string {
	if o == nil || IsNil(o.Thumb) {
		var ret string
		return ret
	}
	return *o.Thumb
}

// GetThumbOk returns a tuple with the Thumb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptocurrencyImage) GetThumbOk() (*string, bool) {
	if o == nil || IsNil(o.Thumb) {
		return nil, false
	}
	return o.Thumb, true
}

// HasThumb returns a boolean if a field has been set.
func (o *CryptocurrencyImage) HasThumb() bool {
	if o != nil && !IsNil(o.Thumb) {
		return true
	}

	return false
}

// SetThumb gets a reference to the given string and assigns it to the Thumb field.
func (o *CryptocurrencyImage) SetThumb(v string) {
	o.Thumb = &v
}

func (o CryptocurrencyImage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CryptocurrencyImage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Large) {
		toSerialize["large"] = o.Large
	}
	if !IsNil(o.Small) {
		toSerialize["small"] = o.Small
	}
	if !IsNil(o.Thumb) {
		toSerialize["thumb"] = o.Thumb
	}
	return toSerialize, nil
}

type NullableCryptocurrencyImage struct {
	value *CryptocurrencyImage
	isSet bool
}

func (v NullableCryptocurrencyImage) Get() *CryptocurrencyImage {
	return v.value
}

func (v *NullableCryptocurrencyImage) Set(val *CryptocurrencyImage) {
	v.value = val
	v.isSet = true
}

func (v NullableCryptocurrencyImage) IsSet() bool {
	return v.isSet
}

func (v *NullableCryptocurrencyImage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCryptocurrencyImage(val *CryptocurrencyImage) *NullableCryptocurrencyImage {
	return &NullableCryptocurrencyImage{value: val, isSet: true}
}

func (v NullableCryptocurrencyImage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCryptocurrencyImage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


