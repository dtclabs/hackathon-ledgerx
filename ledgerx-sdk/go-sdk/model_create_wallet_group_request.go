/*
LedgerX Public API

## Introduction  The LedgerX API provides endpoints for synchronizing on-chain wallets, retrieving normalized financial transactions, and managing wallets, wallet groups, organization members, and the accounting system (Chart of Accounts).  - **Security**: All endpoints (unless otherwise specified) require an **API_KEY**   in the request header. - **Rate Limit**: Depends on the user’s subscription plan. See details on the   subscriptions page. - **Compute Unit (CU)**: Each API consumes a specific number of CUs, which are   deducted from your monthly total.  **Useful Links**: - Rate limit: https://ledgerx.finance/subscriptions - Compute Unit: https://ledgerx.finance/subscriptions  > Note: Some CU and rate limit descriptions are for documentation purposes only. Actual limits are applied based on the user’s subscription plan. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ledgerx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateWalletGroupRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateWalletGroupRequest{}

// CreateWalletGroupRequest struct for CreateWalletGroupRequest
type CreateWalletGroupRequest struct {
	Name string `json:"name"`
	SupportedBlockchains []string `json:"supportedBlockchains"`
}

type _CreateWalletGroupRequest CreateWalletGroupRequest

// NewCreateWalletGroupRequest instantiates a new CreateWalletGroupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateWalletGroupRequest(name string, supportedBlockchains []string) *CreateWalletGroupRequest {
	this := CreateWalletGroupRequest{}
	this.Name = name
	this.SupportedBlockchains = supportedBlockchains
	return &this
}

// NewCreateWalletGroupRequestWithDefaults instantiates a new CreateWalletGroupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateWalletGroupRequestWithDefaults() *CreateWalletGroupRequest {
	this := CreateWalletGroupRequest{}
	return &this
}

// GetName returns the Name field value
func (o *CreateWalletGroupRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateWalletGroupRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateWalletGroupRequest) SetName(v string) {
	o.Name = v
}

// GetSupportedBlockchains returns the SupportedBlockchains field value
func (o *CreateWalletGroupRequest) GetSupportedBlockchains() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SupportedBlockchains
}

// GetSupportedBlockchainsOk returns a tuple with the SupportedBlockchains field value
// and a boolean to check if the value has been set.
func (o *CreateWalletGroupRequest) GetSupportedBlockchainsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SupportedBlockchains, true
}

// SetSupportedBlockchains sets field value
func (o *CreateWalletGroupRequest) SetSupportedBlockchains(v []string) {
	o.SupportedBlockchains = v
}

func (o CreateWalletGroupRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateWalletGroupRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["supportedBlockchains"] = o.SupportedBlockchains
	return toSerialize, nil
}

func (o *CreateWalletGroupRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"supportedBlockchains",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateWalletGroupRequest := _CreateWalletGroupRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateWalletGroupRequest)

	if err != nil {
		return err
	}

	*o = CreateWalletGroupRequest(varCreateWalletGroupRequest)

	return err
}

type NullableCreateWalletGroupRequest struct {
	value *CreateWalletGroupRequest
	isSet bool
}

func (v NullableCreateWalletGroupRequest) Get() *CreateWalletGroupRequest {
	return v.value
}

func (v *NullableCreateWalletGroupRequest) Set(val *CreateWalletGroupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateWalletGroupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateWalletGroupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateWalletGroupRequest(val *CreateWalletGroupRequest) *NullableCreateWalletGroupRequest {
	return &NullableCreateWalletGroupRequest{value: val, isSet: true}
}

func (v NullableCreateWalletGroupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateWalletGroupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


