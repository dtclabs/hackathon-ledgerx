/*
LedgerX Public API

## Introduction  The LedgerX API provides endpoints for synchronizing on-chain wallets, retrieving normalized financial transactions, and managing wallets, wallet groups, organization members, and the accounting system (Chart of Accounts).  - **Security**: All endpoints (unless otherwise specified) require an **API_KEY**   in the request header. - **Rate Limit**: Depends on the user’s subscription plan. See details on the   subscriptions page. - **Compute Unit (CU)**: Each API consumes a specific number of CUs, which are   deducted from your monthly total.  **Useful Links**: - Rate limit: https://ledgerx.finance/subscriptions - Compute Unit: https://ledgerx.finance/subscriptions  > Note: Some CU and rate limit descriptions are for documentation purposes only. Actual limits are applied based on the user’s subscription plan. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ledgerx

import (
	"encoding/json"
)

// checks if the InviteMember201Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InviteMember201Response{}

// InviteMember201Response Response shape follows product payload
type InviteMember201Response struct {
	Data map[string]interface{} `json:"data,omitempty"`
}

// NewInviteMember201Response instantiates a new InviteMember201Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInviteMember201Response() *InviteMember201Response {
	this := InviteMember201Response{}
	return &this
}

// NewInviteMember201ResponseWithDefaults instantiates a new InviteMember201Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInviteMember201ResponseWithDefaults() *InviteMember201Response {
	this := InviteMember201Response{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *InviteMember201Response) GetData() map[string]interface{} {
	if o == nil || IsNil(o.Data) {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InviteMember201Response) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *InviteMember201Response) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *InviteMember201Response) SetData(v map[string]interface{}) {
	o.Data = v
}

func (o InviteMember201Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InviteMember201Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableInviteMember201Response struct {
	value *InviteMember201Response
	isSet bool
}

func (v NullableInviteMember201Response) Get() *InviteMember201Response {
	return v.value
}

func (v *NullableInviteMember201Response) Set(val *InviteMember201Response) {
	v.value = val
	v.isSet = true
}

func (v NullableInviteMember201Response) IsSet() bool {
	return v.isSet
}

func (v *NullableInviteMember201Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInviteMember201Response(val *InviteMember201Response) *NullableInviteMember201Response {
	return &NullableInviteMember201Response{value: val, isSet: true}
}

func (v NullableInviteMember201Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInviteMember201Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


