/*
LedgerX Public API

## Introduction  The LedgerX API provides endpoints for synchronizing on-chain wallets, retrieving normalized financial transactions, and managing wallets, wallet groups, organization members, and the accounting system (Chart of Accounts).  - **Security**: All endpoints (unless otherwise specified) require an **API_KEY**   in the request header. - **Rate Limit**: Depends on the user’s subscription plan. See details on the   subscriptions page. - **Compute Unit (CU)**: Each API consumes a specific number of CUs, which are   deducted from your monthly total.  **Useful Links**: - Rate limit: https://ledgerx.finance/subscriptions - Compute Unit: https://ledgerx.finance/subscriptions  > Note: Some CU and rate limit descriptions are for documentation purposes only. Actual limits are applied based on the user’s subscription plan. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ledgerx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ImportWalletsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportWalletsRequest{}

// ImportWalletsRequest struct for ImportWalletsRequest
type ImportWalletsRequest struct {
	Wallets []string `json:"wallets"`
}

type _ImportWalletsRequest ImportWalletsRequest

// NewImportWalletsRequest instantiates a new ImportWalletsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportWalletsRequest(wallets []string) *ImportWalletsRequest {
	this := ImportWalletsRequest{}
	this.Wallets = wallets
	return &this
}

// NewImportWalletsRequestWithDefaults instantiates a new ImportWalletsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportWalletsRequestWithDefaults() *ImportWalletsRequest {
	this := ImportWalletsRequest{}
	return &this
}

// GetWallets returns the Wallets field value
func (o *ImportWalletsRequest) GetWallets() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Wallets
}

// GetWalletsOk returns a tuple with the Wallets field value
// and a boolean to check if the value has been set.
func (o *ImportWalletsRequest) GetWalletsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Wallets, true
}

// SetWallets sets field value
func (o *ImportWalletsRequest) SetWallets(v []string) {
	o.Wallets = v
}

func (o ImportWalletsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportWalletsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["wallets"] = o.Wallets
	return toSerialize, nil
}

func (o *ImportWalletsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"wallets",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImportWalletsRequest := _ImportWalletsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImportWalletsRequest)

	if err != nil {
		return err
	}

	*o = ImportWalletsRequest(varImportWalletsRequest)

	return err
}

type NullableImportWalletsRequest struct {
	value *ImportWalletsRequest
	isSet bool
}

func (v NullableImportWalletsRequest) Get() *ImportWalletsRequest {
	return v.value
}

func (v *NullableImportWalletsRequest) Set(val *ImportWalletsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableImportWalletsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableImportWalletsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportWalletsRequest(val *ImportWalletsRequest) *NullableImportWalletsRequest {
	return &NullableImportWalletsRequest{value: val, isSet: true}
}

func (v NullableImportWalletsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportWalletsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


