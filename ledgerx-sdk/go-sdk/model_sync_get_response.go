/*
LedgerX Public API

## Introduction  The LedgerX API provides endpoints for synchronizing on-chain wallets, retrieving normalized financial transactions, and managing wallets, wallet groups, organization members, and the accounting system (Chart of Accounts).  - **Security**: All endpoints (unless otherwise specified) require an **API_KEY**   in the request header. - **Rate Limit**: Depends on the user’s subscription plan. See details on the   subscriptions page. - **Compute Unit (CU)**: Each API consumes a specific number of CUs, which are   deducted from your monthly total.  **Useful Links**: - Rate limit: https://ledgerx.finance/subscriptions - Compute Unit: https://ledgerx.finance/subscriptions  > Note: Some CU and rate limit descriptions are for documentation purposes only. Actual limits are applied based on the user’s subscription plan. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ledgerx

import (
	"encoding/json"
)

// checks if the SyncGetResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SyncGetResponse{}

// SyncGetResponse struct for SyncGetResponse
type SyncGetResponse struct {
	Status *SyncStatus `json:"status,omitempty"`
	WalletId *string `json:"walletId,omitempty"`
}

// NewSyncGetResponse instantiates a new SyncGetResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyncGetResponse() *SyncGetResponse {
	this := SyncGetResponse{}
	return &this
}

// NewSyncGetResponseWithDefaults instantiates a new SyncGetResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyncGetResponseWithDefaults() *SyncGetResponse {
	this := SyncGetResponse{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SyncGetResponse) GetStatus() SyncStatus {
	if o == nil || IsNil(o.Status) {
		var ret SyncStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncGetResponse) GetStatusOk() (*SyncStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SyncGetResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given SyncStatus and assigns it to the Status field.
func (o *SyncGetResponse) SetStatus(v SyncStatus) {
	o.Status = &v
}

// GetWalletId returns the WalletId field value if set, zero value otherwise.
func (o *SyncGetResponse) GetWalletId() string {
	if o == nil || IsNil(o.WalletId) {
		var ret string
		return ret
	}
	return *o.WalletId
}

// GetWalletIdOk returns a tuple with the WalletId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncGetResponse) GetWalletIdOk() (*string, bool) {
	if o == nil || IsNil(o.WalletId) {
		return nil, false
	}
	return o.WalletId, true
}

// HasWalletId returns a boolean if a field has been set.
func (o *SyncGetResponse) HasWalletId() bool {
	if o != nil && !IsNil(o.WalletId) {
		return true
	}

	return false
}

// SetWalletId gets a reference to the given string and assigns it to the WalletId field.
func (o *SyncGetResponse) SetWalletId(v string) {
	o.WalletId = &v
}

func (o SyncGetResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SyncGetResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.WalletId) {
		toSerialize["walletId"] = o.WalletId
	}
	return toSerialize, nil
}

type NullableSyncGetResponse struct {
	value *SyncGetResponse
	isSet bool
}

func (v NullableSyncGetResponse) Get() *SyncGetResponse {
	return v.value
}

func (v *NullableSyncGetResponse) Set(val *SyncGetResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSyncGetResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSyncGetResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyncGetResponse(val *SyncGetResponse) *NullableSyncGetResponse {
	return &NullableSyncGetResponse{value: val, isSet: true}
}

func (v NullableSyncGetResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyncGetResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


