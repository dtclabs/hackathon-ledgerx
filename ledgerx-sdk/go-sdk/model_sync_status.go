/*
LedgerX Public API

## Introduction  The LedgerX API provides endpoints for synchronizing on-chain wallets, retrieving normalized financial transactions, and managing wallets, wallet groups, organization members, and the accounting system (Chart of Accounts).  - **Security**: All endpoints (unless otherwise specified) require an **API_KEY**   in the request header. - **Rate Limit**: Depends on the user’s subscription plan. See details on the   subscriptions page. - **Compute Unit (CU)**: Each API consumes a specific number of CUs, which are   deducted from your monthly total.  **Useful Links**: - Rate limit: https://ledgerx.finance/subscriptions - Compute Unit: https://ledgerx.finance/subscriptions  > Note: Some CU and rate limit descriptions are for documentation purposes only. Actual limits are applied based on the user’s subscription plan. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ledgerx

import (
	"encoding/json"
	"fmt"
)

// SyncStatus the model 'SyncStatus'
type SyncStatus string

// List of SyncStatus
const (
	DONE SyncStatus = "DONE"
	FAILED SyncStatus = "FAILED"
	FETCHING_SIGNATURES SyncStatus = "FETCHING_SIGNATURES"
	FETCHING_TRANSACTIONS SyncStatus = "FETCHING_TRANSACTIONS"
)

// All allowed values of SyncStatus enum
var AllowedSyncStatusEnumValues = []SyncStatus{
	"DONE",
	"FAILED",
	"FETCHING_SIGNATURES",
	"FETCHING_TRANSACTIONS",
}

func (v *SyncStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SyncStatus(value)
	for _, existing := range AllowedSyncStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SyncStatus", value)
}

// NewSyncStatusFromValue returns a pointer to a valid SyncStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSyncStatusFromValue(v string) (*SyncStatus, error) {
	ev := SyncStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SyncStatus: valid values are %v", v, AllowedSyncStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SyncStatus) IsValid() bool {
	for _, existing := range AllowedSyncStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SyncStatus value
func (v SyncStatus) Ptr() *SyncStatus {
	return &v
}

type NullableSyncStatus struct {
	value *SyncStatus
	isSet bool
}

func (v NullableSyncStatus) Get() *SyncStatus {
	return v.value
}

func (v *NullableSyncStatus) Set(val *SyncStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSyncStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSyncStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyncStatus(val *SyncStatus) *NullableSyncStatus {
	return &NullableSyncStatus{value: val, isSet: true}
}

func (v NullableSyncStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyncStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

