/*
LedgerX Public API

## Introduction  The LedgerX API provides endpoints for synchronizing on-chain wallets, retrieving normalized financial transactions, and managing wallets, wallet groups, organization members, and the accounting system (Chart of Accounts).  - **Security**: All endpoints (unless otherwise specified) require an **API_KEY**   in the request header. - **Rate Limit**: Depends on the user’s subscription plan. See details on the   subscriptions page. - **Compute Unit (CU)**: Each API consumes a specific number of CUs, which are   deducted from your monthly total.  **Useful Links**: - Rate limit: https://ledgerx.finance/subscriptions - Compute Unit: https://ledgerx.finance/subscriptions  > Note: Some CU and rate limit descriptions are for documentation purposes only. Actual limits are applied based on the user’s subscription plan. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ledgerx

import (
	"encoding/json"
)

// checks if the FinancialTransactionsResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FinancialTransactionsResponseData{}

// FinancialTransactionsResponseData struct for FinancialTransactionsResponseData
type FinancialTransactionsResponseData struct {
	Items []FinancialTransaction `json:"items,omitempty"`
	Pagination *Pagination `json:"pagination,omitempty"`
}

// NewFinancialTransactionsResponseData instantiates a new FinancialTransactionsResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFinancialTransactionsResponseData() *FinancialTransactionsResponseData {
	this := FinancialTransactionsResponseData{}
	return &this
}

// NewFinancialTransactionsResponseDataWithDefaults instantiates a new FinancialTransactionsResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFinancialTransactionsResponseDataWithDefaults() *FinancialTransactionsResponseData {
	this := FinancialTransactionsResponseData{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *FinancialTransactionsResponseData) GetItems() []FinancialTransaction {
	if o == nil || IsNil(o.Items) {
		var ret []FinancialTransaction
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinancialTransactionsResponseData) GetItemsOk() ([]FinancialTransaction, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *FinancialTransactionsResponseData) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []FinancialTransaction and assigns it to the Items field.
func (o *FinancialTransactionsResponseData) SetItems(v []FinancialTransaction) {
	o.Items = v
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *FinancialTransactionsResponseData) GetPagination() Pagination {
	if o == nil || IsNil(o.Pagination) {
		var ret Pagination
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinancialTransactionsResponseData) GetPaginationOk() (*Pagination, bool) {
	if o == nil || IsNil(o.Pagination) {
		return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *FinancialTransactionsResponseData) HasPagination() bool {
	if o != nil && !IsNil(o.Pagination) {
		return true
	}

	return false
}

// SetPagination gets a reference to the given Pagination and assigns it to the Pagination field.
func (o *FinancialTransactionsResponseData) SetPagination(v Pagination) {
	o.Pagination = &v
}

func (o FinancialTransactionsResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FinancialTransactionsResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.Pagination) {
		toSerialize["pagination"] = o.Pagination
	}
	return toSerialize, nil
}

type NullableFinancialTransactionsResponseData struct {
	value *FinancialTransactionsResponseData
	isSet bool
}

func (v NullableFinancialTransactionsResponseData) Get() *FinancialTransactionsResponseData {
	return v.value
}

func (v *NullableFinancialTransactionsResponseData) Set(val *FinancialTransactionsResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableFinancialTransactionsResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableFinancialTransactionsResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFinancialTransactionsResponseData(val *FinancialTransactionsResponseData) *NullableFinancialTransactionsResponseData {
	return &NullableFinancialTransactionsResponseData{value: val, isSet: true}
}

func (v NullableFinancialTransactionsResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFinancialTransactionsResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


