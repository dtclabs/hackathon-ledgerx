/*
LedgerX Public API

## Introduction  The LedgerX API provides endpoints for synchronizing on-chain wallets, retrieving normalized financial transactions, and managing wallets, wallet groups, organization members, and the accounting system (Chart of Accounts).  - **Security**: All endpoints (unless otherwise specified) require an **API_KEY**   in the request header. - **Rate Limit**: Depends on the user’s subscription plan. See details on the   subscriptions page. - **Compute Unit (CU)**: Each API consumes a specific number of CUs, which are   deducted from your monthly total.  **Useful Links**: - Rate limit: https://ledgerx.finance/subscriptions - Compute Unit: https://ledgerx.finance/subscriptions  > Note: Some CU and rate limit descriptions are for documentation purposes only. Actual limits are applied based on the user’s subscription plan. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ledgerx

import (
	"encoding/json"
	"time"
)

// checks if the FinancialTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FinancialTransaction{}

// FinancialTransaction struct for FinancialTransaction
type FinancialTransaction struct {
	Id *string `json:"id,omitempty"`
	Hash *string `json:"hash,omitempty"`
	BlockchainId *string `json:"blockchainId,omitempty"`
	FromAddress NullableString `json:"fromAddress,omitempty"`
	ToAddress NullableString `json:"toAddress,omitempty"`
	ProxyAddress NullableString `json:"proxyAddress,omitempty"`
	Cryptocurrency *Cryptocurrency `json:"cryptocurrency,omitempty"`
	CryptocurrencyAmount *string `json:"cryptocurrencyAmount,omitempty"`
	ValueTimestamp *time.Time `json:"valueTimestamp,omitempty"`
	Type *string `json:"type,omitempty"`
	TypeDetail *FinancialTransactionTypeDetail `json:"typeDetail,omitempty"`
	Status *string `json:"status,omitempty"`
	Substatuses []string `json:"substatuses,omitempty"`
	CostBasis NullableFloat32 `json:"costBasis,omitempty"`
	// Fiat value (can be null if not available)
	FiatAmount NullableFloat32 `json:"fiatAmount,omitempty"`
	FiatAmountPerUnit NullableFloat32 `json:"fiatAmountPerUnit,omitempty"`
	FiatCurrency NullableString `json:"fiatCurrency,omitempty"`
	GainLoss NullableFloat32 `json:"gainLoss,omitempty"`
	Direction NullableString `json:"direction,omitempty"`
	Note NullableString `json:"note,omitempty"`
	InvoiceId NullableString `json:"invoiceId,omitempty"`
	Category NullableString `json:"category,omitempty"`
	CorrespondingChartOfAccount NullableString `json:"correspondingChartOfAccount,omitempty"`
	FinancialTransactionParent *FinancialTransactionParent `json:"financialTransactionParent,omitempty"`
	FromContact *Contact `json:"fromContact,omitempty"`
	ToContact *Contact `json:"toContact,omitempty"`
}

// NewFinancialTransaction instantiates a new FinancialTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFinancialTransaction() *FinancialTransaction {
	this := FinancialTransaction{}
	return &this
}

// NewFinancialTransactionWithDefaults instantiates a new FinancialTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFinancialTransactionWithDefaults() *FinancialTransaction {
	this := FinancialTransaction{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FinancialTransaction) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinancialTransaction) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FinancialTransaction) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FinancialTransaction) SetId(v string) {
	o.Id = &v
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *FinancialTransaction) GetHash() string {
	if o == nil || IsNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinancialTransaction) GetHashOk() (*string, bool) {
	if o == nil || IsNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *FinancialTransaction) HasHash() bool {
	if o != nil && !IsNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *FinancialTransaction) SetHash(v string) {
	o.Hash = &v
}

// GetBlockchainId returns the BlockchainId field value if set, zero value otherwise.
func (o *FinancialTransaction) GetBlockchainId() string {
	if o == nil || IsNil(o.BlockchainId) {
		var ret string
		return ret
	}
	return *o.BlockchainId
}

// GetBlockchainIdOk returns a tuple with the BlockchainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinancialTransaction) GetBlockchainIdOk() (*string, bool) {
	if o == nil || IsNil(o.BlockchainId) {
		return nil, false
	}
	return o.BlockchainId, true
}

// HasBlockchainId returns a boolean if a field has been set.
func (o *FinancialTransaction) HasBlockchainId() bool {
	if o != nil && !IsNil(o.BlockchainId) {
		return true
	}

	return false
}

// SetBlockchainId gets a reference to the given string and assigns it to the BlockchainId field.
func (o *FinancialTransaction) SetBlockchainId(v string) {
	o.BlockchainId = &v
}

// GetFromAddress returns the FromAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FinancialTransaction) GetFromAddress() string {
	if o == nil || IsNil(o.FromAddress.Get()) {
		var ret string
		return ret
	}
	return *o.FromAddress.Get()
}

// GetFromAddressOk returns a tuple with the FromAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FinancialTransaction) GetFromAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FromAddress.Get(), o.FromAddress.IsSet()
}

// HasFromAddress returns a boolean if a field has been set.
func (o *FinancialTransaction) HasFromAddress() bool {
	if o != nil && o.FromAddress.IsSet() {
		return true
	}

	return false
}

// SetFromAddress gets a reference to the given NullableString and assigns it to the FromAddress field.
func (o *FinancialTransaction) SetFromAddress(v string) {
	o.FromAddress.Set(&v)
}
// SetFromAddressNil sets the value for FromAddress to be an explicit nil
func (o *FinancialTransaction) SetFromAddressNil() {
	o.FromAddress.Set(nil)
}

// UnsetFromAddress ensures that no value is present for FromAddress, not even an explicit nil
func (o *FinancialTransaction) UnsetFromAddress() {
	o.FromAddress.Unset()
}

// GetToAddress returns the ToAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FinancialTransaction) GetToAddress() string {
	if o == nil || IsNil(o.ToAddress.Get()) {
		var ret string
		return ret
	}
	return *o.ToAddress.Get()
}

// GetToAddressOk returns a tuple with the ToAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FinancialTransaction) GetToAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ToAddress.Get(), o.ToAddress.IsSet()
}

// HasToAddress returns a boolean if a field has been set.
func (o *FinancialTransaction) HasToAddress() bool {
	if o != nil && o.ToAddress.IsSet() {
		return true
	}

	return false
}

// SetToAddress gets a reference to the given NullableString and assigns it to the ToAddress field.
func (o *FinancialTransaction) SetToAddress(v string) {
	o.ToAddress.Set(&v)
}
// SetToAddressNil sets the value for ToAddress to be an explicit nil
func (o *FinancialTransaction) SetToAddressNil() {
	o.ToAddress.Set(nil)
}

// UnsetToAddress ensures that no value is present for ToAddress, not even an explicit nil
func (o *FinancialTransaction) UnsetToAddress() {
	o.ToAddress.Unset()
}

// GetProxyAddress returns the ProxyAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FinancialTransaction) GetProxyAddress() string {
	if o == nil || IsNil(o.ProxyAddress.Get()) {
		var ret string
		return ret
	}
	return *o.ProxyAddress.Get()
}

// GetProxyAddressOk returns a tuple with the ProxyAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FinancialTransaction) GetProxyAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProxyAddress.Get(), o.ProxyAddress.IsSet()
}

// HasProxyAddress returns a boolean if a field has been set.
func (o *FinancialTransaction) HasProxyAddress() bool {
	if o != nil && o.ProxyAddress.IsSet() {
		return true
	}

	return false
}

// SetProxyAddress gets a reference to the given NullableString and assigns it to the ProxyAddress field.
func (o *FinancialTransaction) SetProxyAddress(v string) {
	o.ProxyAddress.Set(&v)
}
// SetProxyAddressNil sets the value for ProxyAddress to be an explicit nil
func (o *FinancialTransaction) SetProxyAddressNil() {
	o.ProxyAddress.Set(nil)
}

// UnsetProxyAddress ensures that no value is present for ProxyAddress, not even an explicit nil
func (o *FinancialTransaction) UnsetProxyAddress() {
	o.ProxyAddress.Unset()
}

// GetCryptocurrency returns the Cryptocurrency field value if set, zero value otherwise.
func (o *FinancialTransaction) GetCryptocurrency() Cryptocurrency {
	if o == nil || IsNil(o.Cryptocurrency) {
		var ret Cryptocurrency
		return ret
	}
	return *o.Cryptocurrency
}

// GetCryptocurrencyOk returns a tuple with the Cryptocurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinancialTransaction) GetCryptocurrencyOk() (*Cryptocurrency, bool) {
	if o == nil || IsNil(o.Cryptocurrency) {
		return nil, false
	}
	return o.Cryptocurrency, true
}

// HasCryptocurrency returns a boolean if a field has been set.
func (o *FinancialTransaction) HasCryptocurrency() bool {
	if o != nil && !IsNil(o.Cryptocurrency) {
		return true
	}

	return false
}

// SetCryptocurrency gets a reference to the given Cryptocurrency and assigns it to the Cryptocurrency field.
func (o *FinancialTransaction) SetCryptocurrency(v Cryptocurrency) {
	o.Cryptocurrency = &v
}

// GetCryptocurrencyAmount returns the CryptocurrencyAmount field value if set, zero value otherwise.
func (o *FinancialTransaction) GetCryptocurrencyAmount() string {
	if o == nil || IsNil(o.CryptocurrencyAmount) {
		var ret string
		return ret
	}
	return *o.CryptocurrencyAmount
}

// GetCryptocurrencyAmountOk returns a tuple with the CryptocurrencyAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinancialTransaction) GetCryptocurrencyAmountOk() (*string, bool) {
	if o == nil || IsNil(o.CryptocurrencyAmount) {
		return nil, false
	}
	return o.CryptocurrencyAmount, true
}

// HasCryptocurrencyAmount returns a boolean if a field has been set.
func (o *FinancialTransaction) HasCryptocurrencyAmount() bool {
	if o != nil && !IsNil(o.CryptocurrencyAmount) {
		return true
	}

	return false
}

// SetCryptocurrencyAmount gets a reference to the given string and assigns it to the CryptocurrencyAmount field.
func (o *FinancialTransaction) SetCryptocurrencyAmount(v string) {
	o.CryptocurrencyAmount = &v
}

// GetValueTimestamp returns the ValueTimestamp field value if set, zero value otherwise.
func (o *FinancialTransaction) GetValueTimestamp() time.Time {
	if o == nil || IsNil(o.ValueTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.ValueTimestamp
}

// GetValueTimestampOk returns a tuple with the ValueTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinancialTransaction) GetValueTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ValueTimestamp) {
		return nil, false
	}
	return o.ValueTimestamp, true
}

// HasValueTimestamp returns a boolean if a field has been set.
func (o *FinancialTransaction) HasValueTimestamp() bool {
	if o != nil && !IsNil(o.ValueTimestamp) {
		return true
	}

	return false
}

// SetValueTimestamp gets a reference to the given time.Time and assigns it to the ValueTimestamp field.
func (o *FinancialTransaction) SetValueTimestamp(v time.Time) {
	o.ValueTimestamp = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FinancialTransaction) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinancialTransaction) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FinancialTransaction) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *FinancialTransaction) SetType(v string) {
	o.Type = &v
}

// GetTypeDetail returns the TypeDetail field value if set, zero value otherwise.
func (o *FinancialTransaction) GetTypeDetail() FinancialTransactionTypeDetail {
	if o == nil || IsNil(o.TypeDetail) {
		var ret FinancialTransactionTypeDetail
		return ret
	}
	return *o.TypeDetail
}

// GetTypeDetailOk returns a tuple with the TypeDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinancialTransaction) GetTypeDetailOk() (*FinancialTransactionTypeDetail, bool) {
	if o == nil || IsNil(o.TypeDetail) {
		return nil, false
	}
	return o.TypeDetail, true
}

// HasTypeDetail returns a boolean if a field has been set.
func (o *FinancialTransaction) HasTypeDetail() bool {
	if o != nil && !IsNil(o.TypeDetail) {
		return true
	}

	return false
}

// SetTypeDetail gets a reference to the given FinancialTransactionTypeDetail and assigns it to the TypeDetail field.
func (o *FinancialTransaction) SetTypeDetail(v FinancialTransactionTypeDetail) {
	o.TypeDetail = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *FinancialTransaction) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinancialTransaction) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *FinancialTransaction) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *FinancialTransaction) SetStatus(v string) {
	o.Status = &v
}

// GetSubstatuses returns the Substatuses field value if set, zero value otherwise.
func (o *FinancialTransaction) GetSubstatuses() []string {
	if o == nil || IsNil(o.Substatuses) {
		var ret []string
		return ret
	}
	return o.Substatuses
}

// GetSubstatusesOk returns a tuple with the Substatuses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinancialTransaction) GetSubstatusesOk() ([]string, bool) {
	if o == nil || IsNil(o.Substatuses) {
		return nil, false
	}
	return o.Substatuses, true
}

// HasSubstatuses returns a boolean if a field has been set.
func (o *FinancialTransaction) HasSubstatuses() bool {
	if o != nil && !IsNil(o.Substatuses) {
		return true
	}

	return false
}

// SetSubstatuses gets a reference to the given []string and assigns it to the Substatuses field.
func (o *FinancialTransaction) SetSubstatuses(v []string) {
	o.Substatuses = v
}

// GetCostBasis returns the CostBasis field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FinancialTransaction) GetCostBasis() float32 {
	if o == nil || IsNil(o.CostBasis.Get()) {
		var ret float32
		return ret
	}
	return *o.CostBasis.Get()
}

// GetCostBasisOk returns a tuple with the CostBasis field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FinancialTransaction) GetCostBasisOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CostBasis.Get(), o.CostBasis.IsSet()
}

// HasCostBasis returns a boolean if a field has been set.
func (o *FinancialTransaction) HasCostBasis() bool {
	if o != nil && o.CostBasis.IsSet() {
		return true
	}

	return false
}

// SetCostBasis gets a reference to the given NullableFloat32 and assigns it to the CostBasis field.
func (o *FinancialTransaction) SetCostBasis(v float32) {
	o.CostBasis.Set(&v)
}
// SetCostBasisNil sets the value for CostBasis to be an explicit nil
func (o *FinancialTransaction) SetCostBasisNil() {
	o.CostBasis.Set(nil)
}

// UnsetCostBasis ensures that no value is present for CostBasis, not even an explicit nil
func (o *FinancialTransaction) UnsetCostBasis() {
	o.CostBasis.Unset()
}

// GetFiatAmount returns the FiatAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FinancialTransaction) GetFiatAmount() float32 {
	if o == nil || IsNil(o.FiatAmount.Get()) {
		var ret float32
		return ret
	}
	return *o.FiatAmount.Get()
}

// GetFiatAmountOk returns a tuple with the FiatAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FinancialTransaction) GetFiatAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.FiatAmount.Get(), o.FiatAmount.IsSet()
}

// HasFiatAmount returns a boolean if a field has been set.
func (o *FinancialTransaction) HasFiatAmount() bool {
	if o != nil && o.FiatAmount.IsSet() {
		return true
	}

	return false
}

// SetFiatAmount gets a reference to the given NullableFloat32 and assigns it to the FiatAmount field.
func (o *FinancialTransaction) SetFiatAmount(v float32) {
	o.FiatAmount.Set(&v)
}
// SetFiatAmountNil sets the value for FiatAmount to be an explicit nil
func (o *FinancialTransaction) SetFiatAmountNil() {
	o.FiatAmount.Set(nil)
}

// UnsetFiatAmount ensures that no value is present for FiatAmount, not even an explicit nil
func (o *FinancialTransaction) UnsetFiatAmount() {
	o.FiatAmount.Unset()
}

// GetFiatAmountPerUnit returns the FiatAmountPerUnit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FinancialTransaction) GetFiatAmountPerUnit() float32 {
	if o == nil || IsNil(o.FiatAmountPerUnit.Get()) {
		var ret float32
		return ret
	}
	return *o.FiatAmountPerUnit.Get()
}

// GetFiatAmountPerUnitOk returns a tuple with the FiatAmountPerUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FinancialTransaction) GetFiatAmountPerUnitOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.FiatAmountPerUnit.Get(), o.FiatAmountPerUnit.IsSet()
}

// HasFiatAmountPerUnit returns a boolean if a field has been set.
func (o *FinancialTransaction) HasFiatAmountPerUnit() bool {
	if o != nil && o.FiatAmountPerUnit.IsSet() {
		return true
	}

	return false
}

// SetFiatAmountPerUnit gets a reference to the given NullableFloat32 and assigns it to the FiatAmountPerUnit field.
func (o *FinancialTransaction) SetFiatAmountPerUnit(v float32) {
	o.FiatAmountPerUnit.Set(&v)
}
// SetFiatAmountPerUnitNil sets the value for FiatAmountPerUnit to be an explicit nil
func (o *FinancialTransaction) SetFiatAmountPerUnitNil() {
	o.FiatAmountPerUnit.Set(nil)
}

// UnsetFiatAmountPerUnit ensures that no value is present for FiatAmountPerUnit, not even an explicit nil
func (o *FinancialTransaction) UnsetFiatAmountPerUnit() {
	o.FiatAmountPerUnit.Unset()
}

// GetFiatCurrency returns the FiatCurrency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FinancialTransaction) GetFiatCurrency() string {
	if o == nil || IsNil(o.FiatCurrency.Get()) {
		var ret string
		return ret
	}
	return *o.FiatCurrency.Get()
}

// GetFiatCurrencyOk returns a tuple with the FiatCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FinancialTransaction) GetFiatCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FiatCurrency.Get(), o.FiatCurrency.IsSet()
}

// HasFiatCurrency returns a boolean if a field has been set.
func (o *FinancialTransaction) HasFiatCurrency() bool {
	if o != nil && o.FiatCurrency.IsSet() {
		return true
	}

	return false
}

// SetFiatCurrency gets a reference to the given NullableString and assigns it to the FiatCurrency field.
func (o *FinancialTransaction) SetFiatCurrency(v string) {
	o.FiatCurrency.Set(&v)
}
// SetFiatCurrencyNil sets the value for FiatCurrency to be an explicit nil
func (o *FinancialTransaction) SetFiatCurrencyNil() {
	o.FiatCurrency.Set(nil)
}

// UnsetFiatCurrency ensures that no value is present for FiatCurrency, not even an explicit nil
func (o *FinancialTransaction) UnsetFiatCurrency() {
	o.FiatCurrency.Unset()
}

// GetGainLoss returns the GainLoss field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FinancialTransaction) GetGainLoss() float32 {
	if o == nil || IsNil(o.GainLoss.Get()) {
		var ret float32
		return ret
	}
	return *o.GainLoss.Get()
}

// GetGainLossOk returns a tuple with the GainLoss field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FinancialTransaction) GetGainLossOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.GainLoss.Get(), o.GainLoss.IsSet()
}

// HasGainLoss returns a boolean if a field has been set.
func (o *FinancialTransaction) HasGainLoss() bool {
	if o != nil && o.GainLoss.IsSet() {
		return true
	}

	return false
}

// SetGainLoss gets a reference to the given NullableFloat32 and assigns it to the GainLoss field.
func (o *FinancialTransaction) SetGainLoss(v float32) {
	o.GainLoss.Set(&v)
}
// SetGainLossNil sets the value for GainLoss to be an explicit nil
func (o *FinancialTransaction) SetGainLossNil() {
	o.GainLoss.Set(nil)
}

// UnsetGainLoss ensures that no value is present for GainLoss, not even an explicit nil
func (o *FinancialTransaction) UnsetGainLoss() {
	o.GainLoss.Unset()
}

// GetDirection returns the Direction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FinancialTransaction) GetDirection() string {
	if o == nil || IsNil(o.Direction.Get()) {
		var ret string
		return ret
	}
	return *o.Direction.Get()
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FinancialTransaction) GetDirectionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Direction.Get(), o.Direction.IsSet()
}

// HasDirection returns a boolean if a field has been set.
func (o *FinancialTransaction) HasDirection() bool {
	if o != nil && o.Direction.IsSet() {
		return true
	}

	return false
}

// SetDirection gets a reference to the given NullableString and assigns it to the Direction field.
func (o *FinancialTransaction) SetDirection(v string) {
	o.Direction.Set(&v)
}
// SetDirectionNil sets the value for Direction to be an explicit nil
func (o *FinancialTransaction) SetDirectionNil() {
	o.Direction.Set(nil)
}

// UnsetDirection ensures that no value is present for Direction, not even an explicit nil
func (o *FinancialTransaction) UnsetDirection() {
	o.Direction.Unset()
}

// GetNote returns the Note field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FinancialTransaction) GetNote() string {
	if o == nil || IsNil(o.Note.Get()) {
		var ret string
		return ret
	}
	return *o.Note.Get()
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FinancialTransaction) GetNoteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Note.Get(), o.Note.IsSet()
}

// HasNote returns a boolean if a field has been set.
func (o *FinancialTransaction) HasNote() bool {
	if o != nil && o.Note.IsSet() {
		return true
	}

	return false
}

// SetNote gets a reference to the given NullableString and assigns it to the Note field.
func (o *FinancialTransaction) SetNote(v string) {
	o.Note.Set(&v)
}
// SetNoteNil sets the value for Note to be an explicit nil
func (o *FinancialTransaction) SetNoteNil() {
	o.Note.Set(nil)
}

// UnsetNote ensures that no value is present for Note, not even an explicit nil
func (o *FinancialTransaction) UnsetNote() {
	o.Note.Unset()
}

// GetInvoiceId returns the InvoiceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FinancialTransaction) GetInvoiceId() string {
	if o == nil || IsNil(o.InvoiceId.Get()) {
		var ret string
		return ret
	}
	return *o.InvoiceId.Get()
}

// GetInvoiceIdOk returns a tuple with the InvoiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FinancialTransaction) GetInvoiceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InvoiceId.Get(), o.InvoiceId.IsSet()
}

// HasInvoiceId returns a boolean if a field has been set.
func (o *FinancialTransaction) HasInvoiceId() bool {
	if o != nil && o.InvoiceId.IsSet() {
		return true
	}

	return false
}

// SetInvoiceId gets a reference to the given NullableString and assigns it to the InvoiceId field.
func (o *FinancialTransaction) SetInvoiceId(v string) {
	o.InvoiceId.Set(&v)
}
// SetInvoiceIdNil sets the value for InvoiceId to be an explicit nil
func (o *FinancialTransaction) SetInvoiceIdNil() {
	o.InvoiceId.Set(nil)
}

// UnsetInvoiceId ensures that no value is present for InvoiceId, not even an explicit nil
func (o *FinancialTransaction) UnsetInvoiceId() {
	o.InvoiceId.Unset()
}

// GetCategory returns the Category field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FinancialTransaction) GetCategory() string {
	if o == nil || IsNil(o.Category.Get()) {
		var ret string
		return ret
	}
	return *o.Category.Get()
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FinancialTransaction) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Category.Get(), o.Category.IsSet()
}

// HasCategory returns a boolean if a field has been set.
func (o *FinancialTransaction) HasCategory() bool {
	if o != nil && o.Category.IsSet() {
		return true
	}

	return false
}

// SetCategory gets a reference to the given NullableString and assigns it to the Category field.
func (o *FinancialTransaction) SetCategory(v string) {
	o.Category.Set(&v)
}
// SetCategoryNil sets the value for Category to be an explicit nil
func (o *FinancialTransaction) SetCategoryNil() {
	o.Category.Set(nil)
}

// UnsetCategory ensures that no value is present for Category, not even an explicit nil
func (o *FinancialTransaction) UnsetCategory() {
	o.Category.Unset()
}

// GetCorrespondingChartOfAccount returns the CorrespondingChartOfAccount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FinancialTransaction) GetCorrespondingChartOfAccount() string {
	if o == nil || IsNil(o.CorrespondingChartOfAccount.Get()) {
		var ret string
		return ret
	}
	return *o.CorrespondingChartOfAccount.Get()
}

// GetCorrespondingChartOfAccountOk returns a tuple with the CorrespondingChartOfAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FinancialTransaction) GetCorrespondingChartOfAccountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CorrespondingChartOfAccount.Get(), o.CorrespondingChartOfAccount.IsSet()
}

// HasCorrespondingChartOfAccount returns a boolean if a field has been set.
func (o *FinancialTransaction) HasCorrespondingChartOfAccount() bool {
	if o != nil && o.CorrespondingChartOfAccount.IsSet() {
		return true
	}

	return false
}

// SetCorrespondingChartOfAccount gets a reference to the given NullableString and assigns it to the CorrespondingChartOfAccount field.
func (o *FinancialTransaction) SetCorrespondingChartOfAccount(v string) {
	o.CorrespondingChartOfAccount.Set(&v)
}
// SetCorrespondingChartOfAccountNil sets the value for CorrespondingChartOfAccount to be an explicit nil
func (o *FinancialTransaction) SetCorrespondingChartOfAccountNil() {
	o.CorrespondingChartOfAccount.Set(nil)
}

// UnsetCorrespondingChartOfAccount ensures that no value is present for CorrespondingChartOfAccount, not even an explicit nil
func (o *FinancialTransaction) UnsetCorrespondingChartOfAccount() {
	o.CorrespondingChartOfAccount.Unset()
}

// GetFinancialTransactionParent returns the FinancialTransactionParent field value if set, zero value otherwise.
func (o *FinancialTransaction) GetFinancialTransactionParent() FinancialTransactionParent {
	if o == nil || IsNil(o.FinancialTransactionParent) {
		var ret FinancialTransactionParent
		return ret
	}
	return *o.FinancialTransactionParent
}

// GetFinancialTransactionParentOk returns a tuple with the FinancialTransactionParent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinancialTransaction) GetFinancialTransactionParentOk() (*FinancialTransactionParent, bool) {
	if o == nil || IsNil(o.FinancialTransactionParent) {
		return nil, false
	}
	return o.FinancialTransactionParent, true
}

// HasFinancialTransactionParent returns a boolean if a field has been set.
func (o *FinancialTransaction) HasFinancialTransactionParent() bool {
	if o != nil && !IsNil(o.FinancialTransactionParent) {
		return true
	}

	return false
}

// SetFinancialTransactionParent gets a reference to the given FinancialTransactionParent and assigns it to the FinancialTransactionParent field.
func (o *FinancialTransaction) SetFinancialTransactionParent(v FinancialTransactionParent) {
	o.FinancialTransactionParent = &v
}

// GetFromContact returns the FromContact field value if set, zero value otherwise.
func (o *FinancialTransaction) GetFromContact() Contact {
	if o == nil || IsNil(o.FromContact) {
		var ret Contact
		return ret
	}
	return *o.FromContact
}

// GetFromContactOk returns a tuple with the FromContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinancialTransaction) GetFromContactOk() (*Contact, bool) {
	if o == nil || IsNil(o.FromContact) {
		return nil, false
	}
	return o.FromContact, true
}

// HasFromContact returns a boolean if a field has been set.
func (o *FinancialTransaction) HasFromContact() bool {
	if o != nil && !IsNil(o.FromContact) {
		return true
	}

	return false
}

// SetFromContact gets a reference to the given Contact and assigns it to the FromContact field.
func (o *FinancialTransaction) SetFromContact(v Contact) {
	o.FromContact = &v
}

// GetToContact returns the ToContact field value if set, zero value otherwise.
func (o *FinancialTransaction) GetToContact() Contact {
	if o == nil || IsNil(o.ToContact) {
		var ret Contact
		return ret
	}
	return *o.ToContact
}

// GetToContactOk returns a tuple with the ToContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinancialTransaction) GetToContactOk() (*Contact, bool) {
	if o == nil || IsNil(o.ToContact) {
		return nil, false
	}
	return o.ToContact, true
}

// HasToContact returns a boolean if a field has been set.
func (o *FinancialTransaction) HasToContact() bool {
	if o != nil && !IsNil(o.ToContact) {
		return true
	}

	return false
}

// SetToContact gets a reference to the given Contact and assigns it to the ToContact field.
func (o *FinancialTransaction) SetToContact(v Contact) {
	o.ToContact = &v
}

func (o FinancialTransaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FinancialTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	if !IsNil(o.BlockchainId) {
		toSerialize["blockchainId"] = o.BlockchainId
	}
	if o.FromAddress.IsSet() {
		toSerialize["fromAddress"] = o.FromAddress.Get()
	}
	if o.ToAddress.IsSet() {
		toSerialize["toAddress"] = o.ToAddress.Get()
	}
	if o.ProxyAddress.IsSet() {
		toSerialize["proxyAddress"] = o.ProxyAddress.Get()
	}
	if !IsNil(o.Cryptocurrency) {
		toSerialize["cryptocurrency"] = o.Cryptocurrency
	}
	if !IsNil(o.CryptocurrencyAmount) {
		toSerialize["cryptocurrencyAmount"] = o.CryptocurrencyAmount
	}
	if !IsNil(o.ValueTimestamp) {
		toSerialize["valueTimestamp"] = o.ValueTimestamp
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.TypeDetail) {
		toSerialize["typeDetail"] = o.TypeDetail
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Substatuses) {
		toSerialize["substatuses"] = o.Substatuses
	}
	if o.CostBasis.IsSet() {
		toSerialize["costBasis"] = o.CostBasis.Get()
	}
	if o.FiatAmount.IsSet() {
		toSerialize["fiatAmount"] = o.FiatAmount.Get()
	}
	if o.FiatAmountPerUnit.IsSet() {
		toSerialize["fiatAmountPerUnit"] = o.FiatAmountPerUnit.Get()
	}
	if o.FiatCurrency.IsSet() {
		toSerialize["fiatCurrency"] = o.FiatCurrency.Get()
	}
	if o.GainLoss.IsSet() {
		toSerialize["gainLoss"] = o.GainLoss.Get()
	}
	if o.Direction.IsSet() {
		toSerialize["direction"] = o.Direction.Get()
	}
	if o.Note.IsSet() {
		toSerialize["note"] = o.Note.Get()
	}
	if o.InvoiceId.IsSet() {
		toSerialize["invoiceId"] = o.InvoiceId.Get()
	}
	if o.Category.IsSet() {
		toSerialize["category"] = o.Category.Get()
	}
	if o.CorrespondingChartOfAccount.IsSet() {
		toSerialize["correspondingChartOfAccount"] = o.CorrespondingChartOfAccount.Get()
	}
	if !IsNil(o.FinancialTransactionParent) {
		toSerialize["financialTransactionParent"] = o.FinancialTransactionParent
	}
	if !IsNil(o.FromContact) {
		toSerialize["fromContact"] = o.FromContact
	}
	if !IsNil(o.ToContact) {
		toSerialize["toContact"] = o.ToContact
	}
	return toSerialize, nil
}

type NullableFinancialTransaction struct {
	value *FinancialTransaction
	isSet bool
}

func (v NullableFinancialTransaction) Get() *FinancialTransaction {
	return v.value
}

func (v *NullableFinancialTransaction) Set(val *FinancialTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableFinancialTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableFinancialTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFinancialTransaction(val *FinancialTransaction) *NullableFinancialTransaction {
	return &NullableFinancialTransaction{value: val, isSet: true}
}

func (v NullableFinancialTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFinancialTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


